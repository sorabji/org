


* basic org file manipulation 
S-TAB collapses everything\\
TAB toggles
* links
[[http://www.google.com][google]]
web link: [[link][description] ] (no space)\\
org-open-at-point : C-c C-o

[[file:~/notes/test.org::*fruit][a file]]
file link: open the file to be linked to in a new buffer \\
press C-c l to call org-store-link\\
[[*links][eh?]]go to the file you want the link to appear in \\
press C-c C-l \\
org-open-at-point : C-c C-o \\

** anchors:
surround anchor with << >> , then link to anchor elsewhere in file with [[ ] ] (using same text as anchor)\\
(no spaces) C-c C-o will follow the link to the \\
term, C-c & will return mark to where it left.\\
*** example:
    1) <<we will link to this line>> link 1: [[we will link to this line]]


    

** glossary terms:
surround term with <<< >>> , followed by definition (first thing on line). C-c C-c on the term will make \\
all instances of that term in the file a link to the definition.  C-c C-o will follow the link to the \\
term, C-c & will return mark to where it left.\\


* lists
  - <tab> :: fold items just like headline levels
  - M-<ret> :: insert new item at current level (in a term :: definition list, prompt for next term)
  - M-S-<ret> :: insert new item w/ checkbox
  - M-S-<up>/<down> :: move item (including subitems) up/down
  - M-<left>/<right> :: decrease/increase indentation of an item, ignoring subitems
  - M-S-<left>/<right> :: decrease/increase indentation of item, including subitems
  - C-c C-c :: toggle state of checkbox
  - C-c - :: cycle entire list level through different itemize/enumarate bullets 

* tables
  - basic table work
    + <tab>/<ret>/C-c C-c :: re-aligns table
    + |- :: horizontal separator line
  - keys
    - Creation/Conversion
      + C-c | :: convert active region to table. tab/comma/whitespace separated
    - Re-aligning/field motion
      + C-c C-c :: re-align table w/o moving cursor
      + <tab> :: re-align table, move to the next field.
      + S-<tab> :: re-align, move to previous field.
      + <ret> :: re-align, move down to next row.
    - column/row editing
      + M-<left>/<right> :: move current column left/right.
      + M-S-<left> :: kill current column
      + M-S-<right> :: insert new column to the left of the cursor position.
      + M-<up>/<down> :: move current row up/down.
      + M-S-<up> :: kill the current row/horizontal line.
      + M-S-<down> :: insert new row above current row.
      + C-c - :: insert horizontal line below current row.
      + C-c <ret> :: insert horizontal line below current row, and move cursor into the row below that line.
      + C-c ^ :: sort table lines in the region...posiition of point indicates the column to be used
		 for sorting, range of lines is the range between the nearest horizontal separator lines,
		 or the entire table.
  [[http://orgmode.org/org.html#Tables][org-table manual]]


* todos
 - TODO keys
   + M-S <ret> :: create a TODO
   + C-c C-t :: rotate TODO state (unmarked, TODO, DONE)
   + S-<right>/<left> :: select following/preceding TODO state, similar to cycling
   + C-c / t :: view TODO items in a sparse tree. folds the buffer, but shows all
		TODO items and the headings hierarchy above them.
   + S-M-<ret> :: insert a new TODO entry below the current one.
   + C-c a t :: shows global TODO list...collects TODO items from all agendad files 
		into a single buffer (Agenda Views, Global TODO list for more information)



- agenda keys
  + t :: mark a TODO as DONE
  + <ret> :: jump to source file where TODO is located
		
** alternate TODO cycling
    use different sets of TODO keywords in parallel...example:
#+begin_src lisp    
  (setq org-todo-keywords
        '((sequence "TODO(t)" "|" "DONE(d)")
          (sequence "REPORT(r)" "BUG(b)" "KNOWNCAUSE(k)" "|" "FIXED(f)")
          (sequence "|" "CANCELED(c)")))
#+end_src
    keywords should all be different... "|" separates 'working' from 'done' states, parenthesis
    letters are shortcuts that you will be prompted for after pressing C-c C-t

** priorities for TODO
   *** TODO [#A] Write letter to bob

   1. three prioties supported (A,B,C)
   2. keys
      + C-c , :: set priority of the current headline (Press 'A', 'B', 'C', or <spc> 
		 to remove the cookie.
      + S-<up>/<down> :: increase/decrease priority of current headline

** breaking tasks into subtasks
   CLOSED: [2011-04-13 Wed 15:39]
   make a heading, then make subtasks beneath it...to keep track of progress of subtasks\\
   add '[/]' or '[%]' anywhere in the headline...updates everytime TODO status of a child \\
   changes, or when pressing C-c C-c on the cookie example:\\
*** Organize Party [0%]
**** TODO Call People [0/0]
***** TODO Peter
***** DONE Sarah
      CLOSED: [2011-04-12 Tue 21:12]
**** TODO Buy Food
**** DONE Talk to neighbor
     CLOSED: [2011-04-12 Tue 21:12]

* checkboxes
  + C-c C-c :: toggle checkbox status
  + M-S-<ret> :: insert new item w/ checkbox (only works if cursor is already in a plain
		 list item)


- things to do [4/5]
  - [X] write list
  - [X] get food
  - [X] PICK UP austin
  - [1/2] go home
    - [X] 
    - [ ] 
      
* tags 
   - keys
     - inserting tags:
       + C-c C-q :: enter new tags for current headline.
       + C-c C-c :: when cursor is in a headline, does same as C-c C-q
     - searching tags:
       + C-c \ OR C-c / m :: create a sparse tree w/ all headlines matching a tags search
	    (with C-u prefix argument, ignore headlines that are not a TODO line).
       + C-c a m :: create a global list of tag matches from all agenda files
       + C-c a M :: create a global list of tag matches from all agenda files, but check
		    only TODO items and force checking subitems (org-tags-match-list-sublevels)
search prompts for a match string which allows basic Boolean logic:\\
1. '+boss+urgent-project1' finds (boss AND urgent) NOT project1\\
2. 'kathy|sally' finds kathy OR sally\\
** org-tag-alist (global tag completion)
#+begin_src lisp
  (setq org-tag-alist
        '(("@work" . ?w)
          ("@home" . ?h)
          ("@laptop" . ?l)))
#+end_src
@blank is the tag, ?'key' is the shortcut for fast completion
   
* properties
+ C-c C-x p :: prompt for property and value (repeat as needed)
   properties are key value pairs...they look like this:
+ C-c C-c d :: remove a property from the current entry.

by defining a property as :blank_ALL: (then listing values), only the values listed will be \\
allowed to be entered in subsequent entries further down the tree (save typos)\\
** Goldberg Variations
   (check file...properties are hidden from html export)
   :PROPERTIES:
   :NDisks_ALL: 1 2 3 4
   :Ndisks:   4
   :END:
*** something else
    :PROPERTIES:
    :END:

* timestamps
    <2012-04-13 Fri 17:16> 
   - keys
     - inserting timestamps
       - C-c . :: prompt for a date and insert a corresponding timestamp (or modify timestamp
		  at point)...use twice in succession for time range...prefix to add current time.
       - C-c ! :: same as above, but inserts an inactive timestamp (does not affect agenda)
       - S-<left>/<right> :: change date at cursor by one day
       - S-<up>/<down> :: change the item under the cursor in a timestamp (year, month, day, hour
			  minute)
       - C-c C-d :: insert 'DEADLINE' keyword along w/ stamp in line following the headline
       - C-c C-s :: insert 'SCHEDULED' keyword along w/ stamp in line following the headline
     - clocking
       - C-c c-x C-i :: start clock on current item (clock-in)...C-u prefix: select task
			from a list of recently clocked tasks
       - C-c C-x C-o :: stop the clock (clock-out)
       - C-c C-x C-e :: update the effor estimate for the current clock task
       - C-c C-x C-x :: cancel the current clock
       - C-c C-x C-j :: jump to the entry that contains the currently running clock...C-u prefix:
			select the target task from a list of recently clocked tasks
	 - C-c C-x C-r :: insert a dynamic block containing clock report as an org-mode table 
			  in current file.
	 - C-c C-c :: update dynamic block at point...cursor needs to be in the #+BEGIN line


** repeating events
repeats after interval of N days(d), weeks(w), months(m), or years(y) \\

<2011-04-12 Tue 12:30 +1w> repeats every week on tuesday at 12:30\\

* capture
#+begin_src lisp
  (setq org-default-notes-file (concat org-directory "/notes.org"))
  (define-key global-map "\C-cc" 'org-capture)
#+end_src
  aboves defines a default place for notes to be saved, and binds C-c c to capture
  - keys
    - C-c c :: start capture process
    - C-c c-c :: after entering information to the capture buffer, returns you to where
		 you were before started
    - C-c C-W :: moves entry to a refile location
    - C-c C-k :: abort capture process
#+begin_src emacs-lisp
  (setq org-capture-templates
        '(("t" "Todo" entry (file+headline "!/org/gtd.org" "Tasks")
           "* TODO %?\n %i\n %a")
          ("j" "journal" entry (file+datetree "~/org/journal.org")
           "* %?\nEntered on %U\n %i\n %a")))
#+end_src
  1) first string is key to reach the template
  2) second is a short description
  3) next is type of entry and defining target location for storing note
  4) finally, template itself...%'char' fills in special info based on time/context.
     - %a :: annotation, normally the link created with org-store-link
     - %i :: initial content...the region when remember is called w/ C-u
     - %t :: timestamp, date only
     - %T :: timestamp, date+time
     - %u, %U :: same as %t, %T, but inactive timestamps


* refiling notes
  - keys
    - C-c C-w :: refile entry or region at point (offers possible locations
		 for refiling the entry...item is filed below the target heading 
		 as a subitem)
    - C-u C-c C-w :: use the refil interface to jump to a heading.
    - C-u C-u C-c C-w :: jump to the location where org-refile last moved a tree to.

* archiving
  - keys
    - C-c c-x C-a :: archive current entry using command specified in the variable 
		     org-archive-default-command.
    - C-c C-x C-s OR C-c $ :: archive the subtree starting at point to location given by
	 org-archive-location.

* agenda
  - keys
    - C-c [ :: add current file to the list of agenda files.
    - C-c ] :: remove current file from the list of agenda files.
    - C-, :: cycle through agenda file list, visiting one file after the other.
  - agenda dispatcher (after pressing C-c a)
    - a :: calendar-like agenda
    - t/T :: list of all TODO items
    - m/M :: list of headlines matching a TAGS expression
    - L :: timeline view for current buffer
    - s :: list of entries selected by a boolean expression of keywords and/or
	   regex that must/mustnot occur in the entry
  - agenda buffer commands
    - n :: next line
    - p :: previous line
    - <spc> :: display original location of the item in another window.
    - <tab> :: go to the original location of the item in another window.
    - <ret> :: go to original location of the item and delete other windows.
    - o :: delete other windows
    - d / w :: switch to day/week view
    - f and b :: forward/backward in time to display the following/preceding
		 org-agenda-current-span days...example, if display covers
		 a week, switch to the following/previous week.
    - . :: go to today.
    - j :: prompt for a date and go there
    - v l  :: toggle logbook mode
    - r OR g :: recreate agenda buffer to reflect chcanges
    - s :: save all org buffers in current emacs session
    - / :: filter current agenda view w/ respect to a tag
    - \ :: narrow the current agenda filter by an additional condition
    - 0-9 :: digit argument
    - t :: change the TODO state of the item in agenda and the org file
    - C-k :: delete the current agenda item along w/ the entire subtree belonging
	     to it in the original org file
    - C-c C-w :: refile the entry at point
    - C-c C-x C-a OR a :: archive subtree corresponding to the entry at point using
	 default archiving command (org-archive-default-command)
    - C-c C-x C-s OR $ :: archive subtree corresponding to the current headline
    - C-c C-s :: schedule this item, w/ prefix arg remove the scheduling timestamp
    - C-c C-d :: set deadling for item, w/ prefix arg remove the deadline
    - S-<right> AND S-<left> :: change the timestamp associated w/ the current line by one day
    - I :: start clock on current item
    - O / X :: stop/cancel the previously started clock
    - J :: jump to the running clock in another window.

** custom agenda views
#+begin_src emacs-lisp
  (setq org-agenda-custom-commands
        '(("w" todo "WAITING")
          ("u" TAGS "+boss-urgent")
          ("v" tags-todo "+boss-urgent")))
#+end_src
1) first string is key to press after C-c a\\
2) second parameter is search type\\
3) third is string/regex to be used for the matching\\
based on above:\\
  - C-c a w :: global search for TODO entries w/ 'WAITING' as the TODO keyword
  - C-c a u :: global tags search for headlines marked ':boss:' but not ':urgent:'
  - C-c a v :: same as above, but limiting the search to headlines that are also TODO items

* markup for rich export

** structural markup elements
  
    - title :: #+TITLE: this is the title of the document
    - paragraphs :: separated by at least one empty line...to enforce a line break w/in
		    a paragraph, use '\\' at the end of a line
    - also...
#+BEGIN_VERSE
  Great clouds overhead
  Tiny black birds rise and fall
  Snow covers Emacs


      -- AlexShroeder
#+END_VERSE

#+BEGIN_QUOTE
Everything should be made as simple as possible,
but not any simpler -- Albert Einstein
#+END_QUOTE

#+BEGIN_CENTER
Everything should be made as simple as possible, \\
but not any simpler
#+END_CENTER
    - emphasis and monospace *bold*, /italic/, _underlined_, =code=, ~verbatim~, and +strike-through+
    - horizontal rule w/ a line consisting of only dashes (at least 5).
    - lines starting w/ "#" in column/ zero are treated as comments and won't be exported...indented
      line comment starts w/ '#+ ', subtrees starting w/ the word 'COMMENT' won't be exported, and
      regions surrounded by '#+BEGIN_ COMMENT'...'#+END_COMMENT' won't be exported.
    - C-c :: toggle the COMMENT keyword at the beginning of an entry.

** tables
#+CAPTION: this is the caption for the next table (or link)
#+LABEL: tbl:basic-data
| item | price  |
|------+--------|
| book | $35.00 |

refer to the table w/ \ref{tab:basic-data}



** literal examples
#+BEGIN_EXAMPLE
some example from a text file
#+BEGIN_EXAMPLE

simple example line can start w/ a colon following by a space:
    : another example

#+begin_src emacs-lisp
  (defun org-xor (a b)
    "exlusive or."
    (if a (not b) b))
#+end_src
C-c ' enters and leaves special source code buffer

include content from another file:
#+include: "~/.emacs" src emacs-lisp
(src,quote,example)


* editing source code
#+srcname: <name>
#+begin_src <language> <switches> <header arguments>
  <body>
#+end_src
#+results:


C-c C-c to evaluate current block and insert results
#+begin_src emacs-lisp
: (+ 1 8 3 4)
#+end_src

#+results:
: 16

good lord, refer to org-babel if you need more...
